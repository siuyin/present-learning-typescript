# Learning TypeScript
coming from Go
26 Dec 2020

Loh Siu Yin
Engineering Manager
siuyin@xendit.co

## Installing TypeScript
I run TypeScript within a container:
```
docker run -it -v $(pwd):/h --user 1000:1000 -h nodedev --name nodedev node:10-stretch-slim bash
```
then:

```
npm init
npm install typescript --save-dev
npm install jest @types/jest ts-jest --save-dev

npx tsc -v
```

npm init creates a `package.json` file. It has a similar function to `go.mod`.

npx tsc -v runs the tsc (TypeScript compiler) from npm (node package manager)
and shows the installed TypeScript version.

Let's check my TypeScript compiler version:
```
npx tsc -v
```


## Hello World

.code cmd/hello/hello.ts

Let's run it:
```
npx tsc cmd/hello/hello.ts
node cmd/hello/hello.js
```

## arith.ts module

.code arith.ts /10 OMIT/,/20 OMIT/

The `export` keyword exports the sum function and
makes it publicly available.

## Test set-up 

1. Install a testing framework of your choice.
 I selected jest with ts-jest:
 ```
 npm install jest @types/jest ts-jest --save-dev
 ```
1. Configure jest in jest.config.js:

.code  jest.config.js

## Writing tests for arith.ts
My jest.config.js asks jest to look for test in `tests` folders.

/tests/arith_test.ts:

.code tests/arith_test.ts /10 OMIT/,/20 OMIT/

Run all tests with:
```
npx jest
```

And run a single test with:
```
npx jest tests/arith_test.ts --testNamePattern '^sum$'
```

## TypeScript classes and interfaces

.code cmd/classes/main.ts /10 OMIT/,/20 OMIT/

The arith ThreeNums class has a sum method.

## arith module: ThreeNums class
.code arith.ts /20 OMIT/,/30 OMIT/

## TypeScript interfaces
TypeScript interfaces are implicitly satisfied,
much like Go interfaces.

.code cmd/classes/main.ts /40 OMIT/,/50 OMIT/

Thus arith.ThreeNums satisfies the Sumer interface.

and

`mySum` shows how you can have an interface type parameter
for a function.

## Interfaces in action

.code cmd/classes/main.ts /10 OMIT/,/40 OMIT/

mySum accepts tn (a ThreeNums) because it satisfies the Sumer interface.

mySum also accepts aas (an AlsoASumer) because it also satisfies Sumer.

## arith module: AlsoASumer class

.code arith.ts /30 OMIT/,/40 OMIT/

## Testing ThreeNums and AlsoASumer

.code tests/arith_test.ts /20 OMIT/,/30 OMIT/

Let's run the tests:
```
npx jest --silent
```

`--silent` suppresses verbose testing output.

## Classes and Interfaces demo
.code cmd/classes/main.ts /10 OMIT/,/40 OMIT/

Let's run the classes/interfaces demo code:
```
npx tsc cmd/classes/main.ts
node cmd/classes/main.js
```

## Comparison of TypeScript/node and Go
1. TypeScript feels less "batteries included"
 than Go. TypeScript's main tools are `node` and `npm`
 while Go has a all-included `go` tool.

1. TypeScript imposes type-checking on javascript and
 is less "strong" than Go\'s type system. Go\'s type system was
 designed for the language.

1. TypeScript\'s "standard library" is javascript\'s library
 ecosystem. Go has a well-defined standard library.

1. TypeScript needs you to choose from one of many javascript
 testing frameworks. Because they are for javascript, additional
 tools like ts-jest are needed to test TypeScript code. Go
 has a "testing" package included in its standard library.


## Presentation and code download

.link https://github.com/siuyin/present-learning-typescript

# Learning TypeScript concurrency
coming from Go
26 Dec 2020

Loh Siu Yin
Engineering Manager
siuyin@xendit.co

## Concurrency. But before that...

## npm scripts

npm can run scripts defined in `package.json`:

.code package.json /"scripts"/,/}/

Run npm scripts with:
```
npm run test|hello|classes|async
```

test can also be invoked:
```
npm test
or
npm t
```

A http server (if "start" is defined) can be started:
```
npm start
```

## Error handling
.code cmd/errors/main.ts

Let's run the code:
```
npx tsc
node cmd/errors/main.js
```

## npx tsc
`npx tsc`

when run without arguments, compiles *all* .ts files
into .js files

tsc is controlled by a configuration file: `tsconfig.json`: 

.code tsconfig.json

The above tells `tsc` to include the ES2015 (aka ES6) and DOM (Domain Object Model)
libraries.

We will need ES2015 when we use `promises` with async / await.

## Concurrency

## Concurrency
TypeScript / javascript can run a function in a non-blocking way thus:

.code cmd/async/main.ts /main function/,/setTimeout/
.code cmd/async/main.ts /function speak/,/}/

If you ignore `getANum()` for the time being,  
we will output `speaking`,  
then 1 second later,
`spoken` is output.

## getANum

.code cmd/async/main.ts /async function getANum/,/^}$/

An async function always returns a `Promise`.

Here it returns a Promise of type `void`.
No, it is not an empty promise.

Instead it promises to do something,
but this something does not return a value.

We see from the `await` that getANum is waiting for a promised number to be
resolved or fulfilled.

## I promise ...

.code cmd/async/main.ts /function promiseNumber/,/^}/

`promiseNumber` is a regular function which returns a `Promise`
for a number.

`Promise`s are constructed with:
```
new Promise(resolve)
```

There is nothing special about the word `resolve`, which is why
I chose to use `r`. I could also have used `fulfil`.

In `setTimeout` we see that `r` is called with the value 1. We read this as
"promise resolved / fullfilled with the value of 1".

## cmd/async/main.ts

.code cmd/async/main.ts

Let's run the code (should only take about 1 second and not 2 seconds):
```
npx tsc
time node cmd/async/main.js
```

## Locking / mutex

async functions are like goroutines.
When called, they start immediately and will not block
the main program.

They end, when what they promise to do is resolved or fulfilled.

However TypeScript/javascript does not have a "standard" library
for mutex, semaphores or the equivalent of `go` channels.

## http server / express.js

No discussion on concurrency is complete without exploring
a web server that can handle multiple requests concurrently.

Installation:

```
npm install express @types/express
mkdir server
```

## server.ts

.code server/server.ts

There is nothing special about `svr`.
I usually see, in example code,
the name `express` being used instead.

Let's run the server:
```
npx tsc
node server/server.js
```

## Benchmarking run
```
ab -n 2000 -c 8 http://127.0.0.1:3000/

Concurrency Level:      8
Time taken for tests:   1.049 seconds
Complete requests:      2000
Requests per second:    1905.71 [#/sec] (mean)

Percentage of the requests served within a certain time (ms)
  50%      4
  66%      4
  75%      5
  80%      5
  90%      6
  95%      8
  98%      9
  99%     11
 100%     15 (longest request)
```

## Presentation and code download

.link https://github.com/siuyin/present-learning-typescript
